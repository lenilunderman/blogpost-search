{"version":3,"sources":["components/Header.js","components/SearchBox.js","components/List.js","components/ListBox.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchBox","dynamicSearch","type","placeholder","onChange","List","id","title","body","ListBox","blogpost","map","blog","index","key","App","onSearchChange","event","console","log","target","value","setState","searchField","state","fetch","then","response","json","data","this","filterBlogPost","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2PAWeA,G,OARA,WACb,OACE,yBAAKC,UAAU,kBACb,uFCSSC,G,OAZG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,OACE,yBAAKF,UAAU,OACb,2BACEG,KAAK,SACLC,YAAY,uBACZC,SAAUH,OCIHI,EAXF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACzB,OACE,yBAAKT,UAAU,gCACb,4CAAkBO,EAAlB,KACA,yCAAc,+BAAKC,GAAnB,KACA,0CAAe,6BAAf,IAAuBC,EAAvB,KACA,+BCcSC,EAnBC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB,OACE,yBAAKX,UAAU,gCAEXW,EAASC,KAAI,SAACC,EAAMC,GAClB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLP,GAAII,EAASG,GAAOP,GACpBC,MAAOG,EAASG,GAAON,MACvBC,KAAME,EAASG,GAAOL,YC2CrBO,E,kDA7Cb,aAAgB,IAAD,8BACb,gBAmBFC,eAAiB,SAACC,GAChBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAAEC,YAAaN,EAAMG,OAAOC,SAnB1C,EAAKG,MAAQ,CACXd,SAAU,GACVa,YAAa,IAEfL,QAAQC,IAAI,eAPC,E,gEAWO,IAAD,OACnBD,QAAQC,IAAI,aACZM,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKP,SAAS,CAAEZ,SAAUmB,S,+BAStB,MAG0BC,KAAKN,MAA/Bd,EAHA,EAGAA,SAAUa,EAHV,EAGUA,YAEZQ,EAAiBrB,EAASsB,QAAO,SAAApB,GACrC,OAAOA,EAAKL,MAAM0B,cAAcC,SAASX,EAAYU,kBAGvD,OACE,yBAAKlC,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWE,cAAe6B,KAAKd,iBAC/B,kBAAC,EAAD,CAASN,SAAUqB,S,GAxCTI,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACEC,SAASC,eAAe,SD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.6c06603c.chunk.js","sourcesContent":["import React from 'react'\n\n// function component - does not display data...\nconst Header = () => {\n  return (\n    <div className=\"header-site tc\">\n      <h3> Welcome to our webiste! Search all your blog posts.</h3>\n    </div>\n  )\n}\n\nexport default Header\n","import { render } from '@testing-library/react'\nimport React from 'react'\n\nconst SearchBox = ({ dynamicSearch }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        type=\"search\"\n        placeholder=\"search for blog post\"\n        onChange={dynamicSearch}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox\n\n","import React from 'react'\n\nconst List = ({ id, title, body }) => {\n  return (\n    <div className=\"fl w-50 tc br bl b--blue-60 \">\n      <p> The post is: {id} </p>\n      <p> Title is: <b> {title}</b> </p>\n      <p> Blog post: <br /> {body} </p>\n      <hr />\n    </div>\n  )\n}\n\nexport default List\n","import React from 'react'\nimport List from './List'\n\nconst ListBox = ({ blogpost }) => {\n  return (\n    <div className=\"avenir fl w-100 dark-blue tc\">\n      {\n        blogpost.map((blog, index) => {\n          return (\n            <List\n              key={index}\n              id={blogpost[index].id}\n              title={blogpost[index].title}\n              body={blogpost[index].body}\n            />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default ListBox","// modules to be imported\nimport React, { Component } from 'react'\nimport 'tachyons'\n\n// views to be imported\nimport Header from './components/Header'\nimport SearchBox from './components/SearchBox'\nimport ListBox from './components/ListBox'\n\nclass App extends Component {\n  // since it's a class component, usually constructor, super , state ...\n  constructor () {\n    super()\n    // set the state for the data...\n    this.state = {\n      blogpost: [],\n      searchField: ''\n    }\n    console.log('constructor')\n  }\n\n  // component mount? if so...\n  componentDidMount () {\n    console.log('did mount')\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ blogpost: data })\n      })\n  }\n  // dynamic search goes here...\n  onSearchChange = (event) => {\n    console.log(event.target.value)\n    this.setState({ searchField: event.target.value })\n  }\n\n  render () {\n    // console.log(this.state.blogpost) 100{...}\n    // unpacking for readbility\n    const { blogpost, searchField } = this.state\n    // filter the blogposts\n    const filterBlogPost = blogpost.filter(blog => {\n      return blog.title.toLowerCase().includes(searchField.toLowerCase())\n    })\n\n    return (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox dynamicSearch={this.onSearchChange} />\n        <ListBox blogpost={filterBlogPost} />\n      </div>\n\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <App />\n  , document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}